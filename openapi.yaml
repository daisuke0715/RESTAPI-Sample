# APIのSwagger Specificationのバージョン情報
openapi: "3.0.3"

# APIの基本情報
info:
  title: "Shop Review API"
  description: |
    # Feature
    -  GET Reviews
    -  POST Reviews
  version: "1.0.0"
  termsOfService: "https://tastylog.com/terms/"
  contact:
    name: "Customer Support"
    url: "https://tastylog.com/support"
    email: "support-desk@tastylog.com"
  license:
    name: "MIT License"
    url: "https://spdx.org/licenses/MIT.html"

# APIの環境情報
servers:
  - url: "http://localhost:{port}"
    description: "ローカル開発環境"
    variables:
      port: 
        enum: ["3000", "8080"]
        default: "3000"
  - url: "https:/tastylog.com/it1"
    description: "結合テスト環境"
  - url: "https:/tastylog.com/stg"
    description: "ステージング環境"
  - url: "https:/api.tastylog.com"
    description: "本番環境"

# APIの分類情報
tags:
  - name: shops
    description: "About Shops API"
  - name: products
    description: "About Shop's Products API"

# ここが最もOpenAPI構築と呼ばれる典型のところ
paths:
  "/shops/{shopId}/reviews":   # 複数形
    get:
      summary: "Get specified shop reviews"
      description: "{description}: Get specified shop reviews"
      tags: ["shops"]
      deprecated: false
      parameters:
        - name: shopId
          in: path
          required: true
          schema: { type: string }
      responses: 
        "200":
          description: "Success operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
      security: []
      
    post:
      summary: "Create shops reviews"
      description: "{description}: Create shops reviews"
      tags: ["shops"]
      deprecated: false
      parameters:
        - name: shopId
          in: path
          required: true
          schema: { type: string }
          example: "example data"
        - name: X-Api-key
          in: header
          description: "Request user's Identifier"
          schema: { type: string }
          example: "XXXX-XXXX-XXXX-XXXX"
        - name: token
          in: cookie
          description: "One time token"
          schema: { type: string } 
          example: "XXXX-XXXX-XXXX-XXXX"
      requestBody: 
        description: "Content of review"
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses: 
        "201":
          description: "Success operation"
          headers:
            location: 
              description: "New url created shops reviews"
              schema: { type: string, format: url }
        "400":
          $ref: "#/components/responses/400-BadRequest"
      security:
        - apikey_auth: []
  "/shops/{productId}/reviews":   # 複数形
    get: 
      summary: "Get specified shop product reviews"
      description: "{description}Get specified shop product reviews"
      tags: ["products"]
      deprecated: false
      parameters:
        - name: productId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: "Success operation"
    
    post:
      summary: "Create products reviews"
      description: "{description}Create products reviews"
      tags: ["products"]
      parameters:
        - name: productId
          in: path
          required: true
          schema: { type: string }
          example: "1234"
        - name: X-Api-key
          in: header
          description: "Request user's Identifier"
          required: true
          schema: { type: string }
          example: "XXXX-XXXX-XXXX-XXXX"
        - name: token
          in: cookie
          description: "One time token"
          required: true
          schema: { type: string }
          example: "XXXX-XXXX-XXXX-XXXX"
      requestBody:
        description: "Content of review"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shop:
                  type: object
                  properties:
                    name: { type: string, example: "Sample Cafe" }
                    place: { type: string, example: "XXXX" }
                product: 
                  type: object
                  properties:
                    name: { type: string, example: "ホットドッグ" }
                    price: { type: integer, example: "400" }
                reviews:
                  type: array
                  items:
                    type: object
                    properties:
                      score:
                        type: integer
                        enum: [1, 2, 3, 4, 5]
                        example: 5
                      comment: { type: string, example: "お気に入りの商品です" }

      responses:
        "201":
          description: "Success operation"
          headers:
            location:
              description: "New url created products reviews"
              schema: { type: string, format: url }
        "400":
          description: "Client side error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: string, example: "1234" }
                  type: { type: string, example: "InvalidDataFormat" }
                  message: { type: string, example: "Invalid data" }
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field: { type: string }
                        code: { type: string }

# APIのセキュリティ情報
security: 
  - apikey_auth: []

# 要件定義内で使い回せる変数情報
components:
  schemas:    # ここが一番利用する
    Review:
      type: object
      properties:
        score: { type: integer, example: 3 }
        comment: { type: string, example: "美味しかった" }
    ClientError:
      type: object
      properties:
        code: { type: string, example: "1234" }
        type: { type: string, example: "InvalidDataFormat" }
        message: { type: string, example: "Invalid data" }
        errors:
          type: array
          items:
            type: object
            properties:  
              field: { type: string }
              code: { type: string }
    SampleInt:
      type: integer
      minimum: 0
      exclusiveMinimum: false
      maximum: 100
      exclusiveMaximum: true
    SampleString:
      type: string
      nullable: true
      minLength: 10
      maxLength: 20
    SampleBoolean:
      type: boolean
    SampleEnum:
      type: integer
      enum: [ 1, 2, 3, 4, 5 ]
  responses:
    400-BadRequest:
      description: "Client side error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"
  securitySchemes:
    apikey_auth:
      description: "API Key authrization"
      type: apiKey
      in: header
      name: "X-Api-Key"

